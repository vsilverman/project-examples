pipeline {
    agent any
    stages {
        stage ('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/jfrog/jenkins-artifactory-plugin.git"
            }
        }

        stage ('Upload file') {
            steps {
                rtUpload (
                    // Obtain an Artifactory server instance, defined in Jenkins --> Manage Jenkins --> Configure System:
                    serverId: SERVER_ID,
                    spec: """{
                            "files": [
                                    {
                                        "pattern": "jenkins-examples/pipeline-examples/resources/ArtifactoryPipeline.zip",
                                        "target": "libs-release-local"
                                    }
                                ]
                            }"""
                )
            }
        }

        stage ('Create release bundle') {
            steps {
                dsCreateReleaseBundle(
                    serverId: SERVER_ID,
                    name: "example-release-bundle",
                    version: "1",
                    spec: """{
                              "files": [
                                {
                                    "pattern": "libs-release-local/ArtifactoryPipeline.zip"
                                }
                              ]
                             }"""
                )
            }
        }

        stage ('Update release bundle') {
            steps {
                dsUpdateReleaseBundle(
                    serverId: SERVER_ID,
                    name: "example-release-bundle",
                    version: "1",
                    spec: """{
                              "files": [
                                {
                                    "pattern": "libs-release-local/ArtifactoryPipeline.zip"
                                }
                              ]
                             }""",
                    description: "Update a release bundle"
                )
            }
        }

        // Optional - this step can be achieved also by providing "signImmediately: true" to dsUpdateReleaseBundle step
        stage ('Sign release bundle') {
            steps {
                dsSignReleaseBundle(
                    serverId: SERVER_ID,
                    name: "example-release-bundle",
                    version: "1"
                )
            }
        }

        stage ('Distribute release bundle') {
            steps {
                dsDistributeReleaseBundle(
                    serverId: SERVER_ID,
                    name: "example-release-bundle",
                    version: "1",
                    sync: true,
                    distRules: """{
                          "distribution_rules": [
                            {
                              "site_name": "*",
                              "city_name": "*",
                              "country_codes": ["*"]
                            }
                          ]
                        }"""
                    )
            }
        }

        stage ('Delete release bundle') {
            steps {
                dsDeleteReleaseBundle(
                    serverId: SERVER_ID,
                    name: "example-release-bundle",
                    version: "1",
                    sync: true,
                    deleteFromDist: true,
                    distRules: """{
                          "distribution_rules": [
                            {
                              "site_name": "*",
                              "city_name": "*",
                              "country_codes": ["*"]
                            }
                          ]
                        }"""
                    )
            }
        }
    }
}